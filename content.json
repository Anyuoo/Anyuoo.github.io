{"meta":{"title":"Virtual Life","subtitle":"","description":"Never forget why you started , and mission will be accomplished","author":"Anyuoo","url":"http://anyuoo.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-03-01T08:34:59.142Z","updated":"2020-02-28T06:06:04.139Z","comments":false,"path":"categories/index.html","permalink":"http://anyuoo.github.io/categories/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2020-03-01T09:10:34.571Z","updated":"2020-02-28T06:06:04.139Z","comments":false,"path":"/404.html","permalink":"http://anyuoo.github.io/404.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-03-01T09:10:35.249Z","updated":"2020-02-28T06:06:04.139Z","comments":true,"path":"links/index.html","permalink":"http://anyuoo.github.io/links/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-03-01T08:34:59.142Z","updated":"2020-02-28T08:09:19.036Z","comments":false,"path":"about/index.html","permalink":"http://anyuoo.github.io/about/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-03-01T09:10:35.487Z","updated":"2020-02-28T06:06:04.139Z","comments":false,"path":"repository/index.html","permalink":"http://anyuoo.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-03-01T09:10:35.718Z","updated":"2020-02-28T06:06:04.139Z","comments":false,"path":"tags/index.html","permalink":"http://anyuoo.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"排序算法（一）","slug":"排序算法（一）","date":"2020-03-06T13:37:11.000Z","updated":"2020-03-06T14:14:44.108Z","comments":true,"path":"2020/03/06/排序算法（一）/","link":"","permalink":"http://anyuoo.github.io/2020/03/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"","text":"1. 优化后的冒泡排序 内排序，稳定平均时间复杂度：O(n^2) 最好情况：O(n) 最坏情况：O(n^2) 空间复杂度：O（1） /** * 冒泡排序 由大到小 */ public int[] bubbleSort(){ int times; boolean need=true;//判断后面数据是否需要排序 //每一次找的最小数，放最后，n个数就进行n-1次循环 for (times=1; times&lt; length; times++) { if (need == false) break; need = false; for (int pointer = 1; pointer &lt;= length - times; pointer++) { if (nums[pointer - 1] &lt; nums[pointer]) { need = true;//顺序变动，需要再次排序 swap(pointer, pointer - 1); } } } return nums; } 2. 选择排序 内排序，不稳定 平均时间复杂度：O(n^2) 最好情况：O(n^2) 最坏情况：O(n^2) 空间复杂度：O（1） /** * 选择排序，每次选择最大的依次放前面 */ public int[] selectionSort(){ int max_index;//最大值下标 //tail 作为已排序的尾，可做排序次数 for (int tail = 0; tail &lt;length-1 ; tail++) { max_index = tail; for (int pointer = tail + 1; pointer &lt; length; pointer++) { if (nums[max_index] &lt; nums[pointer]) { max_index=pointer; } } swap(max_index, tail); } return nums; } 3.插入排序 内排序，稳定 平均时间复杂度：O(n^2) 最好情况：O(n) 最坏情况：O(n^2) 空间复杂度：O（1） /** * 插入排序,由大到小 */ public int[] insertionSort(){ int tem; //tail表示已排好序的尾部 for ( int tail=0;tail&lt;length-1;tail++){ tem = nums[tail + 1]; while (tail &gt;= 0 &amp;&amp; tem &gt; nums[tail]) {//tail&gt;=0 与 tem &gt; nums[tail] 两个判断条件不能互换 nums[tail + 1] = nums[tail]; tail–; } nums[tail + 1] = tem; } return nums; }","categories":[{"name":"算法","slug":"算法","permalink":"http://anyuoo.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法 排序","slug":"算法-排序","permalink":"http://anyuoo.github.io/tags/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F/"}]},{"title":"Linux权限命令（1）--chmod","slug":"Linux权限命令（1）--chmod","date":"2020-03-02T12:07:11.000Z","updated":"2020-03-06T13:38:21.983Z","comments":true,"path":"2020/03/02/Linux权限命令（1）--chmod/","link":"","permalink":"http://anyuoo.github.io/2020/03/02/Linux%E6%9D%83%E9%99%90%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89--chmod/","excerpt":"","text":"chmod change the permissions mode od a file改变文件或目录权限 命令路径：/bin/chmod语法： * chmod [{ugoa}{+-=}{rwx}] [文件或目录] * chmod [mode=421 ] [文件或目录]参数： * u user 所有者 * g group 所属组 * o other 其他人 * a all 所有人 * r read读权限 数字表示–&gt;4 * w write 写权限 数字表示–&gt;2 * x execute 执行权限 数字表示–&gt;1 * -R 可递归赋给子文件夹相同权限由图可知，文件夹 Videos 权限是 rwxr-xr-x ， 每三个一组，从左到右分别是 * 所有者权限：rwx 4+2+1=7 * 所有组权限：r-x 4+1=5 * 其他人权限：r-x 4+1=5用数字赋值权限：chmod 755 [文件或目录] 对于目录：rx代表可以查看和进目录，权限一般同时出现 对于目录中文件的删除执行不是看文件权限而是看目录权限","categories":[{"name":"Linux","slug":"Linux","permalink":"http://anyuoo.github.io/categories/Linux/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://anyuoo.github.io/tags/Centos/"}]},{"title":"Linux文件系统操作命令","slug":"Linux文件操作命令","date":"2020-02-28T07:31:24.000Z","updated":"2020-03-01T08:10:01.754Z","comments":true,"path":"2020/02/28/Linux文件操作命令/","link":"","permalink":"http://anyuoo.github.io/2020/02/28/Linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/","excerpt":"","text":"1. ls list 显示目录文件 命令所在路径 : /bin/ls语法：ls 选项[-ldi] [文件或目录] * -l `long` 长格式显示，详细信息显示 * -h `human` 以人可读方式显示数据大小 * -i `iNode` 显示文件的i节点号 * -d `direction` 查看目录属性 * -a `all` 显示所有文件，包括隐藏文件ps:设立隐藏文件主要为了将系统文件隐藏，避免用户误操作 2. mkdir make directeries 创建目录 命令所在路径：/bin/mkdir语法：mkdir 选项[-p] [目录名称] * -p 递归创建多级文件夹3. rmdirremove directeries 删除空目录 命令所在路径：/bin/rmdir语法：rmdir [目录名]4. rm remove 删除目录或文件 命令所在路径：/bin/rm语法：rm 选项[-rf] [目录名或文件名] * -r 递归删除，一次删除多级文件 * -f `force` 强制执行5.cp copy 复制文件或目录 命令所在路径：/bin/cp语法：cp -rp [原文件或目录] [目标目录] * -r 复制目录 * -p 保留文件属性6.touch 创建空文件夹 命令所在路径：/bin/touch语法：touch [文件名]7. cat 显示文件内容 命令所在路径：/bin/cat语法：cat 选项[-n b] [文件名] * -n `number` 由 1 开始对所有输出的行数编号 * -b `number nonblan` 和 -n 相似，只不过对于空白行不编号8. more 分页显示文件内容 命令所在路径：/bin/more语法：more 选项[-num +num ] [文件名] * -num `number` 一次显示的行数 * +num `number` 从第 num 行开始显示 常用操作命令： * Enter 向下n行，需要定义。默认为1行 * Ctrl+F 向下滚动一屏 * 空格键 向下滚动一屏 * Ctrl+B 返回上一屏 * = 输出当前行的行号 * ：f 输出文件名和当前行的行号 * V 调用vi编辑器 * !命令 调用Shell，并执行命令 * q 退出more9. less less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件语法：less [文件名]10. head 显示文件前几行 命令所在路径：usr/bin/head语法：head [文件名] * -n 指定行数11. tail 显示文件后面几行 命令所在路径：/usr/bin/tail语法：tail [文件名] * -n 指定行数 * -f 动态显示","categories":[{"name":"Linux","slug":"Linux","permalink":"http://anyuoo.github.io/categories/Linux/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://anyuoo.github.io/tags/Centos/"}]}]}