{"meta":{"title":"Virtual Life","subtitle":"","description":"Never forget why you started , and mission will be accomplished","author":"Anyuoo","url":"http://anyuoo.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-03-07T06:02:00.747Z","updated":"2020-02-28T06:06:04.139Z","comments":false,"path":"/404.html","permalink":"http://anyuoo.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2020-03-07T06:02:00.747Z","updated":"2020-02-28T08:09:19.036Z","comments":false,"path":"about/index.html","permalink":"http://anyuoo.github.io/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-03-07T06:02:00.763Z","updated":"2020-02-28T06:06:04.139Z","comments":false,"path":"categories/index.html","permalink":"http://anyuoo.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-03-07T06:02:00.763Z","updated":"2020-02-28T06:06:04.139Z","comments":true,"path":"links/index.html","permalink":"http://anyuoo.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-03-07T06:02:00.763Z","updated":"2020-02-28T06:06:04.139Z","comments":false,"path":"repository/index.html","permalink":"http://anyuoo.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-03-07T06:02:00.763Z","updated":"2020-02-28T06:06:04.139Z","comments":false,"path":"tags/index.html","permalink":"http://anyuoo.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"排序算法（三）","slug":"排序算法（三）","date":"2020-03-07T04:44:01.000Z","updated":"2020-03-07T05:14:41.727Z","comments":true,"path":"2020/03/07/排序算法（三）/","link":"","permalink":"http://anyuoo.github.io/2020/03/07/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/","excerpt":"","text":"归并排序算法思路：步骤一： 先递归将数组一分为二，直到为单个数字，接着进行合并排序。 步骤二： 合并处理，将分割后的数组，按着有序的次序排放 /** * 归并排序 * * @return */ public int[] mergeSort() { mergeS(0, length - 1); return nums; } public void mergeS(int left, int right) { if (left &lt; right) { int mid = (right + left) / 2; mergeS(left, mid);//递归分割左边 mergeS(mid + 1, right);//递归分割右边 merge(left, mid, right);//合并排序 } } public void merge(int left, int mid, int right) { int[] tem = new int[length];//存放排好的数组 int pointer = left; //存放指针 int P1 = left; //左游标指针 int P2 = mid + 1;//右游标指针 //左边有序和数组右边有序数组有未比较的情况下，相互比较排序 while (P1 &lt;= mid &amp;&amp; P2 &lt;= right) { if (nums[P1] &gt; nums[P2]) { tem[pointer++] = nums[P1++]; } else { tem[pointer++] = nums[P2++]; } } //如果左边没有排完，将左边有序复制到暂存数组 while (P1 &lt;= mid) tem[pointer++] = nums[P1++]; //右边同上 while (P2 &lt;= right) tem[pointer++] = nums[P2++]; // 将排好序的合并到原来数组 for (int i = left; i &lt;= right; i++) { nums[i] = tem[i]; } }","categories":[{"name":"算法","slug":"算法","permalink":"http://anyuoo.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"排序","slug":"算法/排序","permalink":"http://anyuoo.github.io/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"}],"tags":[{"name":"归并排序","slug":"归并排序","permalink":"http://anyuoo.github.io/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"}]},{"title":"排序算法（二）","slug":"排序算法（二）","date":"2020-03-07T04:05:25.000Z","updated":"2020-03-07T04:09:43.635Z","comments":true,"path":"2020/03/07/排序算法（二）/","link":"","permalink":"http://anyuoo.github.io/2020/03/07/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"排序算法（一）","slug":"排序算法（一）","date":"2020-03-06T13:37:11.000Z","updated":"2020-03-07T02:41:28.633Z","comments":true,"path":"2020/03/06/排序算法（一）/","link":"","permalink":"http://anyuoo.github.io/2020/03/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"","text":"1. 优化后的冒泡排序 内排序，稳定平均时间复杂度：O(n^2) 最好情况：O(n) 最坏情况：O(n^2) 空间复杂度：O（1） /** * 冒泡排序 由大到小 */ public int[] bubbleSort(int[] nums){ int times; boolean need=true;//判断后面数据是否需要排序 //每一次找的最小数，放最后，n个数就进行n-1次循环 for (times=1; times&lt; length; times++) { if (need == false) break; need = false; for (int pointer = 1; pointer &lt;= length - times; pointer++) { if (nums[pointer - 1] &lt; nums[pointer]) { need = true;//顺序变动，需要再次排序 swap(pointer, pointer - 1); } } } return nums; }2. 选择排序 内排序，不稳定 平均时间复杂度：O(n^2) 最好情况：O(n^2) 最坏情况：O(n^2) 空间复杂度：O（1） /** * 选择排序，每次选择最大的依次放前面 */ public int[] selectionSort(int nums){ int max_index;//最大值下标 //tail 作为已排序的尾，可做排序次数 for (int tail = 0; tail &lt;length-1 ; tail++) { max_index = tail; for (int pointer = tail + 1; pointer &lt; length; pointer++) { if (nums[max_index] &lt; nums[pointer]) { max_index=pointer; } } swap(max_index, tail); } return nums; }3.插入排序 内排序，稳定 平均时间复杂度：O(n^2) 最好情况：O(n) 最坏情况：O(n^2) 空间复杂度：O（1） /** * 插入排序,由大到小 */ public int[] insertionSort(int nums){ int tem; //tail表示已排好序的尾部 for ( int tail=0;tail&lt;length-1;tail++){ tem = nums[tail + 1]; while (tail &gt;= 0 &amp;&amp; tem &gt; nums[tail]) {//tail&gt;=0 与 tem &gt; nums[tail] 两个判断条件不能互换 nums[tail + 1] = nums[tail]; tail--; } nums[tail + 1] = tem; } return nums; }","categories":[{"name":"算法","slug":"算法","permalink":"http://anyuoo.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"排序","slug":"算法/排序","permalink":"http://anyuoo.github.io/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"}],"tags":[{"name":"冒泡排序","slug":"冒泡排序","permalink":"http://anyuoo.github.io/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"},{"name":"选择排序","slug":"选择排序","permalink":"http://anyuoo.github.io/tags/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"},{"name":"插入排序","slug":"插入排序","permalink":"http://anyuoo.github.io/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"}]},{"title":"模板","slug":"模板","date":"2020-03-02T12:12:11.217Z","updated":"2020-03-02T12:13:02.789Z","comments":true,"path":"2020/03/02/模板/","link":"","permalink":"http://anyuoo.github.io/2020/03/02/%E6%A8%A1%E6%9D%BF/","excerpt":"","text":"title: Linux文件系统操作命令 comment: truecategories:tags:","categories":[],"tags":[]},{"title":"Linux权限命令（1）--chmod","slug":"Linux权限命令（1）--chmod","date":"2020-03-02T12:07:11.000Z","updated":"2020-03-07T02:44:03.711Z","comments":true,"path":"2020/03/02/Linux权限命令（1）--chmod/","link":"","permalink":"http://anyuoo.github.io/2020/03/02/Linux%E6%9D%83%E9%99%90%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89--chmod/","excerpt":"","text":"chmod change the permissions mode od a file改变文件或目录权限 命令路径：/bin/chmod语法： * chmod [{ugoa}{+-=}{rwx}] [文件或目录] * chmod [mode=421 ] [文件或目录]参数： * u `user` 所有者 * g `group` 所属组 * o `other` 其他人 * a `all` 所有人 * r `read`读权限 数字表示--&gt;**4** * w `write` 写权限 数字表示--&gt;**2** * x `execute` 执行权限 数字表示--&gt;**1** * -R 可递归赋给子文件夹相同权限 由图可知，文件夹 Videos 权限是 rwxr-xr-x ， 每三个一组，从左到右分别是 * 所有者权限：rwx `4+2+1=7` * 所有组权限：r-x `4+1=5` * 其他人权限：r-x `4+1=5`用数字赋值权限：chmod 755 [文件或目录] 对于目录：rx代表可以查看和进目录，权限一般同时出现 对于目录中文件的删除执行不是看文件权限而是看目录权限","categories":[{"name":"Linux","slug":"Linux","permalink":"http://anyuoo.github.io/categories/Linux/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://anyuoo.github.io/tags/Centos/"}]},{"title":"Linux文件系统操作命令","slug":"Linux文件操作命令","date":"2020-02-28T07:31:24.000Z","updated":"2020-03-07T02:43:22.336Z","comments":true,"path":"2020/02/28/Linux文件操作命令/","link":"","permalink":"http://anyuoo.github.io/2020/02/28/Linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/","excerpt":"","text":"1. ls list 显示目录文件 命令所在路径 : /bin/ls语法：ls 选项[-ldi] [文件或目录] * -l `long` 长格式显示，详细信息显示 * -h `human` 以人可读方式显示数据大小 * -i `iNode` 显示文件的i节点号 * -d `direction` 查看目录属性 * -a `all` 显示所有文件，包括隐藏文件ps:设立隐藏文件主要为了将系统文件隐藏，避免用户误操作 2. mkdir make directeries 创建目录 命令所在路径：/bin/mkdir语法：mkdir 选项[-p] [目录名称] * -p 递归创建多级文件夹3. rmdirremove directeries 删除空目录 命令所在路径：/bin/rmdir语法：rmdir [目录名]4. rm remove 删除目录或文件 命令所在路径：/bin/rm语法：rm 选项[-rf] [目录名或文件名] * -r 递归删除，一次删除多级文件 * -f `force` 强制执行5.cp copy 复制文件或目录 命令所在路径：/bin/cp语法：cp -rp [原文件或目录] [目标目录] * -r 复制目录 * -p 保留文件属性6.touch 创建空文件夹 命令所在路径：/bin/touch语法：touch [文件名]7. cat 显示文件内容 命令所在路径：/bin/cat语法：cat 选项[-n b] [文件名] * -n `number` 由 1 开始对所有输出的行数编号 * -b `number nonblan` 和 -n 相似，只不过对于空白行不编号8. more 分页显示文件内容 命令所在路径：/bin/more语法：more 选项[-num +num ] [文件名] * -num `number` 一次显示的行数 * +num `number` 从第 num 行开始显示 常用操作命令： * Enter 向下n行，需要定义。默认为1行 * Ctrl+F 向下滚动一屏 * 空格键 向下滚动一屏 * Ctrl+B 返回上一屏 * = 输出当前行的行号 * ：f 输出文件名和当前行的行号 * V 调用vi编辑器 * !命令 调用Shell，并执行命令 * q 退出more9. less less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件语法：less [文件名]10. head 显示文件前几行 命令所在路径：usr/bin/head语法：head [文件名] * -n 指定行数11. tail 显示文件后面几行 命令所在路径：/usr/bin/tail语法：tail [文件名] * -n 指定行数 * -f 动态显示","categories":[{"name":"Linux","slug":"Linux","permalink":"http://anyuoo.github.io/categories/Linux/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://anyuoo.github.io/tags/Centos/"},{"name":"Linux文件处理命令","slug":"Linux文件处理命令","permalink":"http://anyuoo.github.io/tags/Linux%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/"}]},{"title":"test","slug":"test - 副本","date":"2020-02-28T07:31:24.000Z","updated":"2020-03-07T05:23:31.141Z","comments":true,"path":"2020/02/28/test - 副本/","link":"","permalink":"http://anyuoo.github.io/2020/02/28/test%20-%20%E5%89%AF%E6%9C%AC/","excerpt":"","text":"122221232212211","categories":[{"name":"java","slug":"java","permalink":"http://anyuoo.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://anyuoo.github.io/tags/java/"}]},{"title":"test","slug":"test","date":"2020-02-28T07:31:24.000Z","updated":"2020-03-07T05:23:31.141Z","comments":true,"path":"2020/02/28/test/","link":"","permalink":"http://anyuoo.github.io/2020/02/28/test/","excerpt":"","text":"","categories":[],"tags":[]}]}