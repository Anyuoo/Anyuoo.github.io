<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Virtual Life</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://anyuoo.github.io/"/>
  <updated>2020-04-19T02:23:39.821Z</updated>
  <id>http://anyuoo.github.io/</id>
  
  <author>
    <name>Anyuoo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDEA 2020.1 新版本激活到2089</title>
    <link href="http://anyuoo.github.io/2020/04/19/IDEA-2020-1-%E6%96%B0%E7%89%88%E6%9C%AC%E6%BF%80%E6%B4%BB%E5%88%B02089/"/>
    <id>http://anyuoo.github.io/2020/04/19/IDEA-2020-1-%E6%96%B0%E7%89%88%E6%9C%AC%E6%BF%80%E6%B4%BB%E5%88%B02089/</id>
    <published>2020-04-19T02:17:08.000Z</published>
    <updated>2020-04-19T02:23:39.821Z</updated>
    
    <content type="html"><![CDATA[<p>###前提：下载IDEA 2020.1版本，和jetbrains-agent<br>[链接: <a href="https://pan.baidu.com/s/1jeQGXwXjc79teOsRjXmkPQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1jeQGXwXjc79teOsRjXmkPQ</a> ](链接: <a href="https://pan.baidu.com/s/1jeQGXwXjc79teOsRjXmkPQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1jeQGXwXjc79teOsRjXmkPQ</a> )<br>提取码: 5459<br>###1、选择试用启动idea</p><p>###2、进入或解压文件里面的压缩包，进入lib文件夹</p><p>###3、直接将jar文件用鼠标拖进idea界面(也可以使用插件安装方式)，然后一路重启或者确定，中间出现什么拖放失败不用理会，直接点确定就好是正常现象。</p><p>###4.点击Restart</p><p>###5.直接点击为IDEA安装</p><p>###6、重启之后一般情况下就已经破解完成，不需要再改配置文件，点击Help-&gt;Register查看是否成功破解<br>里面的激活码是重启之上自动填入的，如果不行找到下载的压缩文件lib下的ACTIVATION_CODE.txt换一个激活码或者查看README.pdf帮助。</p><p>　　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###前提：下载IDEA 2020.1版本，和jetbrains-agent&lt;br&gt;[链接: &lt;a href=&quot;https://pan.baidu.com/s/1jeQGXwXjc79teOsRjXmkPQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;h
      
    
    </summary>
    
    
      <category term="工具" scheme="http://anyuoo.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="IDEA" scheme="http://anyuoo.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>DP-最大正方形面积</title>
    <link href="http://anyuoo.github.io/2020/03/12/DP-%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2/"/>
    <id>http://anyuoo.github.io/2020/03/12/DP-%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2/</id>
    <published>2020-03-12T13:32:12.000Z</published>
    <updated>2020-03-12T13:48:23.541Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最大正方形面积"><a href="#最大正方形面积" class="headerlink" title="最大正方形面积"></a>最大正方形面积</h3><p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p><p><strong>示例：</strong></p><pre><code>输入: 1 0 1 0 01 0 1 1 11 1 1 1 11 0 0 1 0输出: 4</code></pre><p><strong>解答：</strong></p><p><img src="https://i.imgur.com/AN2uUBV.png" alt></p><p><strong>1.边界条件</strong></p><p><strong>2.状态转移</strong></p><pre><code>public class MaximalSquare {public static int maximalSquare(char[][] matrix) {    //判断matrix是否存在，不存在返回0    if (matrix == null || matrix.length == 0 || matrix[0].length == 0){        return 0;    }    int height=matrix.length;    int width=matrix[0].length;    int max_size=0;    //创建一个新的二维数组（第一行，第一列为0）存放构成正方形的边长    int[][] dp=new int[height+1][width+1];   for (int row=0;row&lt;height;row++){       for (int col=0;col&lt;width;col++){           if (matrix[row][col]==&apos;1&apos;){               //dp[row+1][col+1]对应原数组matrix[row][col]，判断左上，左，上的边长，要构成新的正方形要以最小边长为准；所以新正方形边长为最小边长加1               dp[row+1][col+1]=Math.min(Math.min(dp[row][col+1],dp[row+1][col]),dp[row][col])+1;               //最大正方形边长=max（新正方形边长，原最大边长）               max_size=Math.max(dp[row+1][col+1],max_size);           }       }   }    return max_size*max_size;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;最大正方形面积&quot;&gt;&lt;a href=&quot;#最大正方形面积&quot; class=&quot;headerlink&quot; title=&quot;最大正方形面积&quot;&gt;&lt;/a&gt;最大正方形面积&lt;/h3&gt;&lt;p&gt;在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="算法" scheme="http://anyuoo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="动态规划" scheme="http://anyuoo.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="DP" scheme="http://anyuoo.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口口</title>
    <link href="http://anyuoo.github.io/2020/03/11/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E5%8F%A3/"/>
    <id>http://anyuoo.github.io/2020/03/11/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E5%8F%A3/</id>
    <published>2020-03-11T11:45:02.000Z</published>
    <updated>2020-03-11T11:56:13.948Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目</strong>：给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度</p><p>####<strong>什么是滑动窗口？</strong></p><p>其实就是一个队列,比如例题中的 abcabcbb，进入这个队列（窗口）为 abc 满足题目要求，当再进入 a，队列变成了 abca，这时候不满足要求。所以，我们要移动这个队列！</p><p>####<strong>如何移动？</strong></p><p>我们只要把队列的<strong>左边</strong>的元素移出就行了，直到满足题目要求！<br>一直维持这样的队列，找出队列出现最长的长度时候，求出解！<br>时间复杂度：O(n)<br>####<strong>代码思路：</strong></p><pre><code>class Solution {public int lengthOfLongestSubstring(String s) {    if (s.length()==0) return 0;    HashMap&lt;Character, Integer&gt; map = new HashMap&lt;Character, Integer&gt;();    int max = 0;    int left = 0;    for(int i = 0; i &lt; s.length(); i ++){        //窗口中已存在的字母        if(map.containsKey(s.charAt(i))){            //将最左边的移除，窗口左边缘更新            left = Math.max(left,map.get(s.charAt(i)) + 1);        }        //新值放入窗口，并算出当前无重复的长度，且和最大值比较        max = Math.max(max,i-left+1);         map.put(s.charAt(i),i);    }    return max; }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;题目&lt;/strong&gt;：给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度&lt;/p&gt;
&lt;p&gt;####&lt;strong&gt;什么是滑动窗口？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实就是一个队列,比如例题中的 abcabcbb，进入这个队列（窗口）为 abc 
      
    
    </summary>
    
    
      <category term="算法" scheme="http://anyuoo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="滑动窗口" scheme="http://anyuoo.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>排序算法（三）</title>
    <link href="http://anyuoo.github.io/2020/03/07/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://anyuoo.github.io/2020/03/07/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2020-03-07T04:44:01.000Z</published>
    <updated>2020-03-07T05:14:41.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h3><p><strong>步骤一：</strong> 先递归将数组一分为二，直到为单个数字，接着进行合并排序。</p><p><strong>步骤二：</strong> 合并处理，将分割后的数组，按着有序的次序排放</p><pre><code> /** * 归并排序 * * @return */public int[] mergeSort() {    mergeS(0, length - 1);    return nums;}public void mergeS(int left, int right) {    if (left &lt; right) {        int mid = (right + left) / 2;        mergeS(left, mid);//递归分割左边        mergeS(mid + 1, right);//递归分割右边        merge(left, mid, right);//合并排序    }}public void merge(int left, int mid, int right) {    int[] tem = new int[length];//存放排好的数组    int pointer = left; //存放指针    int P1 = left; //左游标指针    int P2 = mid + 1;//右游标指针    //左边有序和数组右边有序数组有未比较的情况下，相互比较排序    while (P1 &lt;= mid &amp;&amp; P2 &lt;= right) {        if (nums[P1] &gt; nums[P2]) {            tem[pointer++] = nums[P1++];        } else {            tem[pointer++] = nums[P2++];        }    }    //如果左边没有排完，将左边有序复制到暂存数组    while (P1 &lt;= mid)        tem[pointer++] = nums[P1++];    //右边同上    while (P2 &lt;= right)        tem[pointer++] = nums[P2++];    // 将排好序的合并到原来数组    for (int i = left; i &lt;= right; i++) {        nums[i] = tem[i];    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h2&gt;&lt;h3 id=&quot;算法思路：&quot;&gt;&lt;a href=&quot;#算法思路：&quot; class=&quot;headerlink&quot; title=&quot;算法思路：&quot;&gt;
      
    
    </summary>
    
    
      <category term="算法" scheme="http://anyuoo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://anyuoo.github.io/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="归并排序" scheme="http://anyuoo.github.io/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序算法（二）</title>
    <link href="http://anyuoo.github.io/2020/03/07/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://anyuoo.github.io/2020/03/07/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-03-07T04:13:52.000Z</published>
    <updated>2020-03-07T05:00:21.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h3><p><strong>步骤一</strong>： 定义基准，并将原数组切割成两个无序数组，并将并将大于基准的放到基准右边，小于放到左边。</p><p><strong>步骤二</strong>： 对基准左边和右边的数组分别重复进行步骤一操作。</p><ul><li><p>基准可以是数组下标也可以是数组值</p></li><li><p>递归切割数组停止条件，当被切割数组长度为一时，停止。</p></li><li><p>   /**</p><pre><code>* 4.快速排序* quickS方法递归调用自身，处理被基准分割的数组* quick 定义基准pivot，并将大于基准的放到基准右边，小于放到左边*/</code></pre><p>   public int[] quickSort() {</p><pre><code>int head = 0;int tail = length - 1;quickS(head, tail);return nums;</code></pre><p>   }</p><p>   /**</p><pre><code>* 方法递归调用自身，处理被基准分割的数组** @param head* @param tail*/</code></pre><p>   public void quickS(int head, int tail) {</p><pre><code>if (head &lt; tail) {    int pivot = quick(head, tail);    quickS(head, pivot - 1);    quickS(pivot + 1, tail);}</code></pre><p>   }</p><p>   /**</p><pre><code>* 定义基准pivot，并将大于基准的放到基准右边，小于放到左边** @param head 数组头指针* @param tail 数组尾指针* @return*/</code></pre><p>   public int quick(int head, int tail) {</p><pre><code>int pivot = head;//初始化基准，赋值头指针while (head &lt; tail) {    while (head &lt; tail &amp;&amp; nums[pivot] &gt;= nums[tail])        tail--;    swap(pivot, tail);    pivot = tail;    while (head &lt; tail &amp;&amp; nums[pivot] &lt; nums[head])        head++;    swap(pivot, head);    pivot = head;}return pivot;</code></pre><p>   }</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h2&gt;&lt;h3 id=&quot;算法思路：&quot;&gt;&lt;a href=&quot;#算法思路：&quot; class=&quot;headerlink&quot; title=&quot;算法思路：&quot;&gt;
      
    
    </summary>
    
    
      <category term="算法" scheme="http://anyuoo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://anyuoo.github.io/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="快速排序" scheme="http://anyuoo.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序算法（一）</title>
    <link href="http://anyuoo.github.io/2020/03/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://anyuoo.github.io/2020/03/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-03-06T13:37:11.000Z</published>
    <updated>2020-03-07T02:41:28.633Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-优化后的冒泡排序-内排序，稳定"><a href="#1-优化后的冒泡排序-内排序，稳定" class="headerlink" title="1. 优化后的冒泡排序  内排序，稳定"></a>1. <strong>优化后的冒泡排序</strong>  <code>内排序，稳定</code></h4><p>平均时间复杂度：<em>O(n^2)</em>  最好情况：<em>O(n)</em>  最坏情况：<em>O(n^2)</em> 空间复杂度：<em>O（1）</em> </p><pre><code>/**        * 冒泡排序 由大到小        */       public int[] bubbleSort(int[] nums){           int times;           boolean need=true;//判断后面数据是否需要排序           //每一次找的最小数，放最后，n个数就进行n-1次循环           for (times=1; times&lt; length; times++) {               if (need == false)                   break;               need = false;               for (int pointer = 1; pointer &lt;= length - times; pointer++) {                   if (nums[pointer - 1] &lt; nums[pointer]) {                       need = true;//顺序变动，需要再次排序                       swap(pointer, pointer - 1);                   }               }           }           return nums;       }</code></pre><h4 id="2-选择排序-内排序，不稳定"><a href="#2-选择排序-内排序，不稳定" class="headerlink" title="2. 选择排序 内排序，不稳定"></a>2. <strong>选择排序</strong> <code>内排序，不稳定</code></h4><p> 平均时间复杂度：<em>O(n^2)</em> 最好情况：<em>O(n^2)</em> 最坏情况：<em>O(n^2)</em> 空间复杂度：<em>O（1）</em> </p><pre><code>    /** * 选择排序，每次选择最大的依次放前面 */public int[] selectionSort(int nums){    int max_index;//最大值下标    //tail 作为已排序的尾，可做排序次数    for (int tail = 0; tail &lt;length-1 ; tail++) {        max_index = tail;        for (int pointer = tail + 1; pointer &lt; length; pointer++) {            if (nums[max_index] &lt; nums[pointer]) {                max_index=pointer;            }        }        swap(max_index, tail);    }    return nums;}</code></pre><h4 id="3-插入排序-内排序，稳定"><a href="#3-插入排序-内排序，稳定" class="headerlink" title="3.插入排序 内排序，稳定"></a>3.<strong>插入排序</strong> <code>内排序，稳定</code></h4><p> 平均时间复杂度：<em>O(n^2)</em> 最好情况：<em>O(n)</em> 最坏情况：<em>O(n^2)</em> 空间复杂度：<em>O（1）</em> </p><pre><code>/**   * 插入排序,由大到小   */  public int[] insertionSort(int nums){      int tem;      //tail表示已排好序的尾部      for ( int tail=0;tail&lt;length-1;tail++){          tem = nums[tail + 1];          while (tail &gt;= 0 &amp;&amp; tem &gt; nums[tail]) {//tail&gt;=0 与 tem &gt; nums[tail] 两个判断条件不能互换              nums[tail + 1] = nums[tail];              tail--;          }          nums[tail + 1] = tem;      }      return nums;  }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-优化后的冒泡排序-内排序，稳定&quot;&gt;&lt;a href=&quot;#1-优化后的冒泡排序-内排序，稳定&quot; class=&quot;headerlink&quot; title=&quot;1. 优化后的冒泡排序  内排序，稳定&quot;&gt;&lt;/a&gt;1. &lt;strong&gt;优化后的冒泡排序&lt;/strong&gt;  &lt;co
      
    
    </summary>
    
    
      <category term="算法" scheme="http://anyuoo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://anyuoo.github.io/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="冒泡排序" scheme="http://anyuoo.github.io/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
      <category term="选择排序" scheme="http://anyuoo.github.io/tags/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    
      <category term="插入排序" scheme="http://anyuoo.github.io/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux权限命令（1）--chmod</title>
    <link href="http://anyuoo.github.io/2020/03/02/Linux%E6%9D%83%E9%99%90%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89--chmod/"/>
    <id>http://anyuoo.github.io/2020/03/02/Linux%E6%9D%83%E9%99%90%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89--chmod/</id>
    <published>2020-03-02T12:07:11.000Z</published>
    <updated>2020-03-07T02:44:03.711Z</updated>
    
    <content type="html"><![CDATA[<p>chmod <code>change the permissions mode od a file</code>改变文件或目录权限 命令路径：<em>/bin/chmod</em><br>语法：</p><pre><code>* chmod [{ugoa}{+-=}{rwx}] [文件或目录]* chmod [mode=421 ] [文件或目录]</code></pre><p>参数：</p><pre><code>* u `user` 所有者* g `group` 所属组* o `other` 其他人* a `all` 所有人* r `read`读权限 数字表示--&gt;**4*** w `write` 写权限 数字表示--&gt;**2*** x `execute` 执行权限 数字表示--&gt;**1*** -R 可递归赋给子文件夹相同权限</code></pre><p><img src="/2020/03/02/Linux%E6%9D%83%E9%99%90%E5%91%BD%E4%BB%A4%EF%BC%881%EF%BC%89--chmod/chmod.chmod.jpg" alt="chmod"></p><p>由图可知，文件夹 <em>Videos</em> 权限是 <strong>rwxr-xr-x</strong> ， 每三个一组，从左到右分别是</p><pre><code>* 所有者权限：rwx `4+2+1=7`* 所有组权限：r-x `4+1=5`* 其他人权限：r-x `4+1=5`</code></pre><p>用数字赋值权限：chmod 755 [文件或目录]<br>    对于目录：rx代表可以查看和进目录，权限一般同时出现<br>    对于目录中文件的删除执行不是看文件权限而是看目录权限</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;chmod &lt;code&gt;change the permissions mode od a file&lt;/code&gt;改变文件或目录权限 命令路径：&lt;em&gt;/bin/chmod&lt;/em&gt;&lt;br&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* chmod [{ugoa}{+-=}{rwx
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://anyuoo.github.io/categories/Linux/"/>
    
    
      <category term="Centos" scheme="http://anyuoo.github.io/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件系统操作命令</title>
    <link href="http://anyuoo.github.io/2020/02/28/Linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>http://anyuoo.github.io/2020/02/28/Linux%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</id>
    <published>2020-02-28T07:31:24.000Z</published>
    <updated>2020-03-07T02:43:22.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-ls-list-显示目录文件-命令所在路径-bin-ls"><a href="#1-ls-list-显示目录文件-命令所在路径-bin-ls" class="headerlink" title="1.  ls  list 显示目录文件  命令所在路径 : /bin/ls"></a>1.  <strong>ls</strong>  <code>list</code> 显示目录文件  命令所在路径 : <em>/bin/ls</em></h4><pre><code>语法：ls 选项[-ldi] [文件或目录]* -l `long` 长格式显示，详细信息显示* -h `human` 以人可读方式显示数据大小* -i `iNode` 显示文件的i节点号* -d `direction` 查看目录属性* -a `all` 显示所有文件，包括隐藏文件</code></pre><p><code>ps:设立隐藏文件主要为了将系统文件隐藏，避免用户误操作</code></p><h4 id="2-mkdir-make-directeries-创建目录-命令所在路径：-bin-mkdir"><a href="#2-mkdir-make-directeries-创建目录-命令所在路径：-bin-mkdir" class="headerlink" title="2. mkdir make directeries 创建目录 命令所在路径：/bin/mkdir"></a>2. <strong>mkdir</strong> <code>make directeries</code> 创建目录 命令所在路径：<em>/bin/mkdir</em></h4><pre><code>语法：mkdir 选项[-p] [目录名称]* -p 递归创建多级文件夹</code></pre><h4 id="3-rmdirremove-directeries-删除空目录-命令所在路径：-bin-rmdir"><a href="#3-rmdirremove-directeries-删除空目录-命令所在路径：-bin-rmdir" class="headerlink" title="3. rmdirremove directeries 删除空目录 命令所在路径：/bin/rmdir"></a>3. <strong>rmdir</strong><code>remove directeries</code> 删除空目录 命令所在路径：<em>/bin/rmdir</em></h4><pre><code>语法：rmdir [目录名]</code></pre><h4 id="4-rm-remove-删除目录或文件-命令所在路径：-bin-rm"><a href="#4-rm-remove-删除目录或文件-命令所在路径：-bin-rm" class="headerlink" title="4. rm remove 删除目录或文件 命令所在路径：/bin/rm"></a>4. <strong>rm</strong> <code>remove</code> 删除目录或文件 命令所在路径：<em>/bin/rm</em></h4><pre><code>语法：rm 选项[-rf] [目录名或文件名]* -r 递归删除，一次删除多级文件* -f `force` 强制执行</code></pre><h4 id="5-cp-copy-复制文件或目录-命令所在路径：-bin-cp"><a href="#5-cp-copy-复制文件或目录-命令所在路径：-bin-cp" class="headerlink" title="5.cp copy 复制文件或目录 命令所在路径：/bin/cp"></a>5.<strong>cp</strong> <code>copy</code> 复制文件或目录 命令所在路径：<em>/bin/cp</em></h4><pre><code>语法：cp -rp [原文件或目录] [目标目录]* -r 复制目录* -p 保留文件属性</code></pre><h4 id="6-touch-创建空文件夹-命令所在路径：-bin-touch"><a href="#6-touch-创建空文件夹-命令所在路径：-bin-touch" class="headerlink" title="6.touch 创建空文件夹 命令所在路径：/bin/touch"></a>6.<strong>touch</strong> 创建空文件夹 命令所在路径：<em>/bin/touch</em></h4><pre><code>语法：touch [文件名]</code></pre><h4 id="7-cat-显示文件内容-命令所在路径：-bin-cat"><a href="#7-cat-显示文件内容-命令所在路径：-bin-cat" class="headerlink" title="7. cat 显示文件内容 命令所在路径：/bin/cat"></a>7. <strong>cat</strong> 显示文件内容 命令所在路径：<em>/bin/cat</em></h4><pre><code>语法：cat 选项[-n b] [文件名]* -n `number` 由 1 开始对所有输出的行数编号* -b `number nonblan` 和 -n 相似，只不过对于空白行不编号</code></pre><h4 id="8-more-分页显示文件内容-命令所在路径：-bin-more"><a href="#8-more-分页显示文件内容-命令所在路径：-bin-more" class="headerlink" title="8. more 分页显示文件内容 命令所在路径：/bin/more"></a>8. <strong>more</strong> 分页显示文件内容 命令所在路径：<em>/bin/more</em></h4><pre><code>语法：more 选项[-num +num ] [文件名]* -num `number` 一次显示的行数* +num `number` 从第 num 行开始显示常用操作命令：* Enter 向下n行，需要定义。默认为1行* Ctrl+F 向下滚动一屏* 空格键 向下滚动一屏* Ctrl+B 返回上一屏* = 输出当前行的行号* ：f 输出文件名和当前行的行号* V 调用vi编辑器* !命令 调用Shell，并执行命令* q 退出more</code></pre><h4 id="9-less-less-与-more-类似，但使用-less-可以随意浏览文件，而-more-仅能向前移动，却不能向后移动，而且-less-在查看之前不会加载整个文件"><a href="#9-less-less-与-more-类似，但使用-less-可以随意浏览文件，而-more-仅能向前移动，却不能向后移动，而且-less-在查看之前不会加载整个文件" class="headerlink" title="9. less less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件"></a>9. <strong>less</strong> less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件</h4><pre><code>语法：less [文件名]</code></pre><h4 id="10-head-显示文件前几行-命令所在路径：usr-bin-head"><a href="#10-head-显示文件前几行-命令所在路径：usr-bin-head" class="headerlink" title="10. head 显示文件前几行 命令所在路径：usr/bin/head"></a>10. <strong>head</strong> 显示文件前几行 命令所在路径：<em>usr/bin/head</em></h4><pre><code>语法：head [文件名]* -n 指定行数</code></pre><h4 id="11-tail-显示文件后面几行-命令所在路径：-usr-bin-tail"><a href="#11-tail-显示文件后面几行-命令所在路径：-usr-bin-tail" class="headerlink" title="11. tail 显示文件后面几行 命令所在路径：/usr/bin/tail"></a>11. <strong>tail</strong> 显示文件后面几行 命令所在路径：<em>/usr/bin/tail</em></h4><pre><code>语法：tail [文件名]* -n 指定行数* -f 动态显示</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-ls-list-显示目录文件-命令所在路径-bin-ls&quot;&gt;&lt;a href=&quot;#1-ls-list-显示目录文件-命令所在路径-bin-ls&quot; class=&quot;headerlink&quot; title=&quot;1.  ls  list 显示目录文件  命令所在路径 : /b
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://anyuoo.github.io/categories/Linux/"/>
    
    
      <category term="Centos" scheme="http://anyuoo.github.io/tags/Centos/"/>
    
      <category term="Linux文件处理命令" scheme="http://anyuoo.github.io/tags/Linux%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>
